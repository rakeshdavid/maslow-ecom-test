// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rzvCoVzaF3R2GUVDhpifyK
// Component: H2Memm7CAcl
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import MenuButton from "../../MenuButton" // plasmic-import: UvrD2WmY7WXX/component
import LinkButton from "../../LinkButton" // plasmic-import: bz5yyMq_-Bm9/component
import IconLink from "../../IconLink" // plasmic-import: Cn71wxfMXIUD/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen" // plasmic-import: irC-CDVrpB1q/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_furn_e_commerce.module.css" // plasmic-import: rzvCoVzaF3R2GUVDhpifyK/projectcss
import * as sty from "./PlasmicHeader.module.css" // plasmic-import: H2Memm7CAcl/css

import SearchIcon from "./icons/PlasmicIcon__Search" // plasmic-import: vFHGCL6rMF-F/icon
import CogIcon from "./icons/PlasmicIcon__Cog" // plasmic-import: t5Pp9_LRjRvz/icon
import ShoppingCartIcon from "./icons/PlasmicIcon__ShoppingCart" // plasmic-import: 6gY6LeT2xNIP/icon
import plasmicLq3PnRb92T from "./images/plasmic.png" // plasmic-import: lq3-pnRB-92T/picture

export type PlasmicHeader__VariantMembers = {
  expanded: "expanded"
}

export type PlasmicHeader__VariantsArgs = {
  expanded?: SingleBooleanChoiceArg<"expanded">
}

type VariantPropType = keyof PlasmicHeader__VariantsArgs
export const PlasmicHeader__VariantProps = new Array<VariantPropType>(
  "expanded"
)

export type PlasmicHeader__ArgsType = {}
type ArgPropType = keyof PlasmicHeader__ArgsType
export const PlasmicHeader__ArgProps = new Array<ArgPropType>()

export type PlasmicHeader__OverridesType = {
  root?: p.Flex<"div">
  menuButton?: p.Flex<typeof MenuButton>
  link?: p.Flex<"a"> & Partial<LinkProps>
  img?: p.Flex<"img">
}

export interface DefaultHeaderProps {
  expanded?: SingleBooleanChoiceArg<"expanded">
  className?: string
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs
  args: PlasmicHeader__ArgsType
  overrides: PlasmicHeader__OverridesType
  dataFetches?: PlasmicHeader__Fetches
  forNode?: string
}) {
  const { variants, args, overrides, forNode, dataFetches } = props

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  })

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__expanded]: hasVariant(variants, "expanded", "expanded"),
      })}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__gkgc)}
      >
        {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
          <MenuButton
            data-plasmic-name={"menuButton"}
            data-plasmic-override={overrides.menuButton}
            className={classNames("__wab_instance", sty.menuButton, {
              [sty.menuButton__expanded]: hasVariant(
                variants,
                "expanded",
                "expanded"
              ),
            })}
            expanded={
              hasVariant(variants, "expanded", "expanded") &&
              hasVariant(globalVariants, "screen", "mobile")
                ? ("expanded" as const)
                : undefined
            }
          />
        ) : null}

        <p.PlasmicLink
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(defaultcss.a, sty.link)}
          component={Link}
          href={"/" as const}
          platform={"gatsby"}
        >
          <img
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(defaultcss.img, sty.img)}
            src={plasmicLq3PnRb92T}
          />
        </p.PlasmicLink>

        {(
          hasVariant(variants, "expanded", "expanded") &&
          hasVariant(globalVariants, "screen", "mobile")
            ? false
            : hasVariant(globalVariants, "screen", "mobile")
            ? false
            : true
        ) ? (
          <div
            className={classNames(defaultcss.all, sty.freeBox__byQun, {
              [sty.freeBox__expanded__byQunh2HLm]: hasVariant(
                variants,
                "expanded",
                "expanded"
              ),
            })}
          >
            <LinkButton
              className={classNames("__wab_instance", sty.linkButton__bkP1T)}
              href={"/#home" as const}
              size={"small" as const}
              text={"Home"}
              type={"blankGray" as const}
            />

            <LinkButton
              className={classNames("__wab_instance", sty.linkButton___3KzxM)}
              href={"/#new-arrival" as const}
              size={"small" as const}
              text={"New Arrival"}
              type={"blankGray" as const}
            />

            <LinkButton
              className={classNames("__wab_instance", sty.linkButton__zj0Hg)}
              href={"/#features" as const}
              size={"small" as const}
              text={"Features"}
              type={"blankGray" as const}
            />

            <LinkButton
              className={classNames("__wab_instance", sty.linkButton__rynxZ)}
              href={"/#blog" as const}
              size={"small" as const}
              text={"Blog"}
              type={"blankGray" as const}
            />

            <LinkButton
              className={classNames("__wab_instance", sty.linkButton__dlAJn)}
              href={"/#contact" as const}
              size={"small" as const}
              text={"Contact"}
              type={"blankGray" as const}
            />
          </div>
        ) : null}

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox___4Q4HH)}
        >
          <IconLink
            className={classNames("__wab_instance", sty.iconLink__n60Ao)}
            icon={
              <SearchIcon
                className={classNames(defaultcss.all, sty.svg__healv)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__zAvOk)}
            icon={
              <CogIcon
                className={classNames(defaultcss.all, sty.svg__s0RLo)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__fbe2J)}
            icon={
              <ShoppingCartIcon
                className={classNames(defaultcss.all, sty.svg__okIkX)}
                role={"img"}
              />
            }
          />
        </p.Stack>
      </p.Stack>

      {(
        hasVariant(variants, "expanded", "expanded") &&
        hasVariant(globalVariants, "screen", "mobile")
          ? true
          : false
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__pN0Tg, {
            [sty.freeBox__expanded__pN0Tgh2HLm]: hasVariant(
              variants,
              "expanded",
              "expanded"
            ),
          })}
        >
          <LinkButton
            className={classNames("__wab_instance", sty.linkButton___7TjQq)}
            text={"Home"}
            type={"blankGray" as const}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__zj9U1)}
            text={"New Arrival"}
            type={"blankGray" as const}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__ojhny)}
            text={"Features"}
            type={"blankGray" as const}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__y1Vll)}
            text={"Blog"}
            type={"blankGray" as const}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__b4TO)}
            text={"Contact"}
            type={"blankGray" as const}
          />
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: ["root", "menuButton", "link", "img"],
  menuButton: ["menuButton"],
  link: ["link", "img"],
  img: ["img"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
  menuButton: typeof MenuButton
  link: "a"
  img: "img"
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs
    args?: PlasmicHeader__ArgsType
    overrides?: NodeOverridesType<T>
    dataFetches?: PlasmicHeader__Fetches
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeader__ArgProps,
      internalVariantPropNames: PlasmicHeader__VariantProps,
    })

    const { dataFetches } = props

    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader"
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`
  }
  return func
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuButton: makeNodeComponent("menuButton"),
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps,
  }
)

export default PlasmicHeader
/* prettier-ignore-end */
