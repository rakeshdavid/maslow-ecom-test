// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rzvCoVzaF3R2GUVDhpifyK
// Component: 5cSBXvRUKgX
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import IconLink from "../../IconLink" // plasmic-import: Cn71wxfMXIUD/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen" // plasmic-import: irC-CDVrpB1q/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_furn_e_commerce.module.css" // plasmic-import: rzvCoVzaF3R2GUVDhpifyK/projectcss
import * as sty from "./PlasmicFooter.module.css" // plasmic-import: 5cSBXvRUKgX/css

import LocationArrowIcon from "./icons/PlasmicIcon__LocationArrow" // plasmic-import: n1VKgFnX4ReE/icon
import FacebookIcon from "./icons/PlasmicIcon__Facebook" // plasmic-import: vgwRwXXpCugt/icon
import InstagramIcon from "./icons/PlasmicIcon__Instagram" // plasmic-import: YWZSvqzz9Ds9/icon
import LinkedinIcon from "./icons/PlasmicIcon__Linkedin" // plasmic-import: Qv2S3vHBR-Ds/icon

export type PlasmicFooter__VariantMembers = {}

export type PlasmicFooter__VariantsArgs = {}
type VariantPropType = keyof PlasmicFooter__VariantsArgs
export const PlasmicFooter__VariantProps = new Array<VariantPropType>()

export type PlasmicFooter__ArgsType = {}
type ArgPropType = keyof PlasmicFooter__ArgsType
export const PlasmicFooter__ArgProps = new Array<ArgPropType>()

export type PlasmicFooter__OverridesType = {
  root?: p.Flex<"div">
  textbox?: p.Flex<"input">
  button?: p.Flex<"button">
}

export interface DefaultFooterProps {
  className?: string
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs
  args: PlasmicFooter__ArgsType
  overrides: PlasmicFooter__OverridesType
  dataFetches?: PlasmicFooter__Fetches
  forNode?: string
}) {
  const { variants, args, overrides, forNode, dataFetches } = props

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  })

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__asvnb)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__s7As)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text__hkSg5
            )}
          >
            {"Information"}
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox___1HM0D)}
          >
            <p.PlasmicLink
              className={classNames(
                defaultcss.a,
                defaultcss.__wab_text,
                sty.link__eps3J
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"About Us"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.a,
                defaultcss.__wab_text,
                sty.link__mJxxE
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Contact Us"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.a,
                defaultcss.__wab_text,
                sty.link___1Sz7A
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"News"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.a,
                defaultcss.__wab_text,
                sty.link__yB4Bn
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Store"}
            </p.PlasmicLink>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__gypfh)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text__nBoGj
            )}
          >
            {"Collections"}
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__kjNvI)}
          >
            <p.PlasmicLink
              className={classNames(
                defaultcss.a,
                defaultcss.__wab_text,
                sty.link__lXb9X
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Wooden Chair"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.a,
                defaultcss.__wab_text,
                sty.link__jKmsd
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Royal Cloth Sofa"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.a,
                defaultcss.__wab_text,
                sty.link___1NaXy
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Accent Chair"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.a,
                defaultcss.__wab_text,
                sty.link__kpWl3
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Bed"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.a,
                defaultcss.__wab_text,
                sty.link__sctzc
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Hanging Lamp"}
            </p.PlasmicLink>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__rejGx)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text___8R4Uj
            )}
          >
            {"My Accounts"}
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__su5Qe)}
          >
            <p.PlasmicLink
              className={classNames(
                defaultcss.a,
                defaultcss.__wab_text,
                sty.link__khL4
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"My Account"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.a,
                defaultcss.__wab_text,
                sty.link__rgA6F
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Wishlist"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.a,
                defaultcss.__wab_text,
                sty.link__zOejd
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Community"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.a,
                defaultcss.__wab_text,
                sty.link__k9KaF
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Order History"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.a,
                defaultcss.__wab_text,
                sty.link__zraoz
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"My Cart"}
            </p.PlasmicLink>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__jcLUg)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text__nZ7Eb
            )}
          >
            {"Newsletter"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text__p58Nn
            )}
          >
            {"Subscribe to get latest news, updates, and information"}
          </div>

          <div className={classNames(defaultcss.all, sty.freeBox__rLj8T)}>
            <input
              data-plasmic-name={"textbox"}
              data-plasmic-override={overrides.textbox}
              className={classNames(defaultcss.input, sty.textbox)}
              placeholder={"Enter Email Here..." as const}
              size={1 as const}
              type={"text" as const}
              value={"" as const}
            />

            <button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames(defaultcss.button, sty.button)}
            >
              <LocationArrowIcon
                className={classNames(defaultcss.all, sty.svg__guiE)}
                role={"img"}
              />
            </button>
          </div>
        </p.Stack>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__rdjCt)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__dm7Nc)}
        >
          <IconLink
            className={classNames("__wab_instance", sty.iconLink__dxk9T)}
            icon={
              <FacebookIcon
                className={classNames(defaultcss.all, sty.svg__w25Cb)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__nl1G)}
            icon={
              <InstagramIcon
                className={classNames(defaultcss.all, sty.svg__ldWh6)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink___2ZYny)}
            icon={
              <LinkedinIcon
                className={classNames(defaultcss.all, sty.svg__gtJf9)}
                role={"img"}
              />
            }
          />
        </p.Stack>

        <div className={classNames(defaultcss.all, sty.freeBox__xDzPr)}>
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text__elBxi
            )}
          >
            {"© Copyright. "}
          </div>

          <p.PlasmicLink
            className={classNames(
              defaultcss.a,
              defaultcss.__wab_text,
              sty.link__z5Mqb
            )}
            component={Link}
            href={"https://www.plasmic.app/" as const}
            platform={"gatsby"}
          >
            {"Made by Plasmic. "}
          </p.PlasmicLink>

          <p.PlasmicLink
            className={classNames(
              defaultcss.a,
              defaultcss.__wab_text,
              sty.link___7Wah
            )}
            component={Link}
            href={"https://www.themesine.com/" as const}
            platform={"gatsby"}
          >
            {"Inspired by Themesine."}
          </p.PlasmicLink>
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: ["root", "textbox", "button"],
  textbox: ["textbox"],
  button: ["button"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
  textbox: "input"
  button: "button"
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs
    args?: PlasmicFooter__ArgsType
    overrides?: NodeOverridesType<T>
    dataFetches?: PlasmicFooter__Fetches
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooter__ArgProps,
      internalVariantPropNames: PlasmicFooter__VariantProps,
    })

    const { dataFetches } = props

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter"
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`
  }
  return func
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textbox: makeNodeComponent("textbox"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps,
  }
)

export default PlasmicFooter
/* prettier-ignore-end */
